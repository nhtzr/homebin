#!/usr/bin/env bash


main() {
  set -ueo pipefail
  fromSa "$@"
}

fromSa() {
  SA="${1:?Service account required as first parameter}"
  TOKEN_SECRET="$(kubectl get sa "$SA" -o jsonpath='{.secrets.*.name}')"
  CACRT="$(kubectl get secret "$TOKEN_SECRET" -o jsonpath='{.data.ca\.crt}'       | base64 -d)" \
  TOKEN="$(kubectl get secret "$TOKEN_SECRET" -o jsonpath='{.data.token}'         | base64 -d)" \
  NAMESPACE="$(kubectl get secret "$TOKEN_SECRET" -o jsonpath='{.data.namespace}' | base64 -d)" \
  mkkubeconfig
}

mkkubeconfig() {
  : "${SERVER:=https://kubernetes.default.svc.cluster.local}"
  : "${CACRT:?Missing cacert envvar}"
  : "${TOKEN:?Missing token envvar}"
  : "${NAMESPACE:?Missing namespace envvar}"

  (
    export KUBECONFIG="$(mktemp)"
    kubectl config set-cluster local-cluster            \
      --server "${SERVER}"                              \
      --certificate-authority <(printf '%s' "${CACRT}") \
      --embed-certs >/dev/stderr

    kubectl config set-credentials local-token \
      --cluster local-cluster                  \
      --token "${TOKEN}" >/dev/stderr

    kubectl config set-context default        \
      --cluster local-cluster                 \
      --user local-token                      \
      --namespace "${NAMESPACE}" >/dev/stderr

    kubectl config use-context default >/dev/stderr
    cat "$KUBECONFIG"
    rm -rf "$KUBECONFIG"
  )
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
