#!/usr/bin/env bash

usage="usage: $0 [submit|write] [deploy|patch] <manifest-files>"
# Requires latest yq (tested w/ yq (https://github.com/mikefarah/yq/) version 4.12.0)

submit-op() {
  curl -sSf -XPOST localhost:7002/kubernetes/ops -d @'/dev/stdin' -H 'Content-Type: application/json' -vv
}

watch-task() {
  local resourceUri
  resourceUri=$(jq -r '.resourceUri | values | @sh')
  if [[ -z "$resourceUri" ]]; then
    echo "Error: No resource id was found" >&2
    return 1
  fi

  while ! curl -sSf -vv "localhost:7002$resourceUri" |
      jq -e 'if .status.completed then . else empty end'; do
    sleep 5
  done
}

watch-task-jitter() {
  local MAX_BACKOFF=120
  local current_backoff=6
  local current_deadline=$(($(date +%s) + current_backoff))
  while ! curl -sSf -vv "localhost:7002$resourceUri" |
      jq -e 'if .status.completed then . else empty end' > /dev/null; do
    if [[ $(date +%s) -ge $current_deadline ]]; then
      current_backoff=$((current_backoff * 2))
      if [[ $current_backoff -gt MAX_BACKOFF ]]; then
        current_backoff=$MAX_BACKOFF
      fi
      local jitter=$((RANDOM % (JITTER * 2 + 1) - JITTER))
      current_deadline=$(($(date +%s) + current_backoff + jitter))
    fi
    set -x
    sleep $(( current_deadline - $(date +%s) ))
    set +x
  done
}
}

mapToJsonStream() {
  local file
  for file in "$@"
  do
    if [[ ! -e "$file" ]]; then
      echo "Error: File or directory does not exist: $file" >&2
      return 1
    fi

    if [[ -d "$file" ]]; then
      find "$file" -name '*.yml' -o -name '*.yaml' -exec yq ea -o json {} \;
    else
      yq ea -o json "$file"
    fi
  done
}

write-deploy-operation() {
 if test -z "${app:-}"; then
   app=$(mapToJsonStream "$@" | jq -Mcnser 'first(input[].metadata.name)')
 fi
 mapToJsonStream "$@" |
   jq -Mcnse '[{deployManifest: {$account, $cloudProvider, $manifestArtifactAccount, moniker: {$app, $cluster}, manifests: input}}]' \
    --arg account "${account:-account1}"            \
    --arg cloudProvider "${provider:-kubernetes}"   \
    --arg manifestArtifactAccount embedded-artifact \
    --arg app "${app:-}"                            \
    --arg cluster "${spinCluster:-}"

}

write-patch-operation() {
  mapToJsonStream "$@" |
    jq -Mcnse '[{patchKubernetesManifest: {$account, $cloudProvider, $manifestArtifactAccount, $manifestName, $location, options: {$mergeStrategy, $record}, patchBody: input}}]' \
      --arg account "${account:-account1}"              \
      --arg cloudProvider "${provider:-kubernetes}"     \
      --arg manifestArtifactAccount embedded-artifact   \
      --jsonArg record "${record:-false}"               \
      --arg mergeStrategy "${mergeStrategy:-strategic}" \
      --arg location "${location:-default}"             \
      --arg manifestName "${manifestName:?}"            \

}

write-operation() {
  case "${1:?$usage}" in
    deploy)
      shift
      echo write-deploy-operation
      ;;
    patch)
      shift
      echo write-patch-operation
      ;;
    *)
      echo "$usage" >&2
      return 1
      ;;
  esac
}

main() {
  local dependency
  case "${1:?$usage}" in
    write)
      shift
      dependency=$(write-operation "$@")
      : ${dependency:?Unexpected param ${2:-} }
      shift

      "$dependency" "$@"
      ;;
    submit)
      shift
      dependency=$(write-operation "$@")
      : ${dependency:?Unexpected param ${2:-} }
      shift

      $dependency "$@"              |
        tee >(jq -C . >/dev/stderr) |
        submit-op                   |
        tee >(jq -C . >/dev/stderr) |
        watch-task
      ;;
    *)
      echo "$usage"
      ;;
  esac
}


if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  set -ueo pipefail
  main "$@"
fi

